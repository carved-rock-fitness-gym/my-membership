name: Code Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

jobs:
  lint:
    name: ESLint Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint and Capture Results
        id: eslint
        run: |
          # Run ESLint and capture the output, but don't fail the workflow if ESLint finds issues
          set +e
          eslint_output=$(npx eslint --format json src/)
          ESLINT_EXIT_CODE=$?
          set -e
          
          # Check if the output has content (is not null or empty string)
          # Also check if it's valid JSON starting with [
          if [[ -n "$eslint_output" && "$eslint_output" == \[* ]]; then
            echo "ESLint found issues, outputting JSON."
            # Pass the JSON content directly via GITHUB_OUTPUT
            echo "eslint-json=$eslint_output" >> "$GITHUB_OUTPUT"
          else
            echo "ESLint produced no output or invalid JSON (Exit Code: $ESLINT_EXIT_CODE). Outputting empty array."
            echo "eslint-json=[]" >> "$GITHUB_OUTPUT"
          fi
          
      - name: Create issues for ESLint violations
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |-
            const fs = require('fs');
            
            try {
              // Read the ESLint results from the step output
              const eslintResultsContent = `${{ steps.eslint.outputs.eslint-json }}`;
              console.log(`Raw ESLint results content length from output: ${eslintResultsContent.length}`);
              
              if (!eslintResultsContent) {
                console.log("ESLint results output is empty. No issues to create.");
                return;
              }
              
              const eslintResults = JSON.parse(eslintResultsContent);
              console.log(`Found ${eslintResults.length} files with potential issues`);
              
              for (const result of eslintResults) {
                const filePath = result.filePath.replace(/^\/github\/workspace\//, '');
                console.log(`Processing file: ${filePath}, found ${result.messages.length} issues`);
                
                for (const message of result.messages) {
                  const ruleName = message.ruleId || 'unknown-rule';
                  const fileName = filePath.split('/').pop();
                  const title = `[LINT] ${ruleName} violation in ${fileName}`;
                  const body = `
                  **File:** ${filePath}
                  **Line:** ${message.line}
                  **Column:** ${message.column}
                  **Rule:** ${ruleName}
                  
                  **Description:** ${message.message}
                  `;
                  
                  console.log(`Creating issue: ${title}`);
                  
                  try {
                    await github.rest.issues.create({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      title: title,
                      body: body,
                      labels: ['technical-debt'],
                      assignees: [context.payload.pull_request.user.login]
                    });
                    console.log(`Issue created successfully for ${ruleName} in ${filePath}`);
                  } catch (error) {
                    console.error(`Error creating issue: ${error.message}`);
                  }
                }
              }
            } catch (error) {
              console.error(`Error processing ESLint results: ${error.message}`);
              console.error(error.stack);
            }

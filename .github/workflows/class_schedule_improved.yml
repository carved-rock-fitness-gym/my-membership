name: Class Schedule CI/CD

on:
  workflow_call:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: NODE_OPTIONS=--experimental-vm-modules npm run lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Frontend Base Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          target: base
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: carved-rock/class-schedule-frontend:base
          build-args: |
            NODE_ENV=development
            GENERATE_SOURCEMAP=true
            CYPRESS_INSTALL_BINARY=0
          load: true

      - name: Generate Test Data
        run: |
          # Generate large test dataset
          node scripts/generate-test-data.js --records=100000
          
      - name: Build Frontend Test Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          target: test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: carved-rock/class-schedule-frontend:test
          build-args: |
            NODE_ENV=test
            COVERAGE=true
            TEST_RETRY=3
            JEST_WORKERS=4
          load: true

      - name: Run Extended Test Suite
        run: |
          # Run comprehensive test suite with coverage
          docker run --rm carved-rock/class-schedule-frontend:test npm run test:coverage -- --maxWorkers=4 
          
          # Generate test reports
          docker run --rm carved-rock/class-schedule-frontend:test npm run test:report
          
      - name: Build Production Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          target: production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: carved-rock/class-schedule-frontend:prod
          build-args: |
            NODE_ENV=production
            GENERATE_SOURCEMAP=false
            MINIFY=true
            TREESHAKE=true
          load: true
          
      - name: Production Optimizations
        run: |
          # Generate production bundle analysis
          docker run --rm carved-rock/class-schedule-frontend:prod npm run analyze
          
          # Run bundle optimization checks
          docker run --rm carved-rock/class-schedule-frontend:prod npm run bundle-check
          
          # Generate source maps
          docker run --rm carved-rock/class-schedule-frontend:prod npm run generate-sourcemaps

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4

      - name: Deploy and Load Test Staging
        run: |
          # Deploy to staging environment
          docker run carved-rock/class-schedule-frontend:prod npm run deploy:staging
          
          # Run synthetic monitoring 
          docker run carved-rock/class-schedule-frontend:test npm run monitor:staging
          
          # Run accessibility audit
          docker run carved-rock/class-schedule-frontend:test npm run a11y:staging

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest 
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Production Deployment
        run: |
          # Run blue-green deployment
          docker run carved-rock/class-schedule-frontend:prod npm run deploy:production
          
          # Run post-deploy validation
          docker run carved-rock/class-schedule-frontend:test npm run validate:production
          
          # Generate deployment verification report
          docker run carved-rock/class-schedule-frontend:test npm run report:deployment
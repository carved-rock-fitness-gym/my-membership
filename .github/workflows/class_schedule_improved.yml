name: Class Schedule CI/CD

on:
  workflow_call:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run lint
        run: NODE_OPTIONS=--experimental-vm-modules npm run lint

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Multi-stage builds for different components
      - name: Build Frontend Base Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          target: base
          tags: carved-rock/class-schedule-frontend:base
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true
            
      - name: Build Frontend Dev Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          target: development
          tags: carved-rock/class-schedule-frontend:dev
          cache-from: |
            type=gha
            carved-rock/class-schedule-frontend:base
          cache-to: type=gha,mode=max
          load: true

      - name: Build API Base Image  
        uses: docker/build-push-action@v5
        with:
          context: ./api
          target: base
          tags: carved-rock/class-schedule-api:base
          cache-from: type=gha 
          cache-to: type=gha,mode=max
          load: true

      - name: Build API Dev Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          target: development
          tags: carved-rock/class-schedule-api:dev
          cache-from: |
            type=gha
            carved-rock/class-schedule-api:base
          cache-to: type=gha,mode=max
          load: true

      # Comprehensive testing suite
      - name: Run Unit Tests
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from unit-tests
          
      - name: Run API Integration Tests
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from api-integration
          
      - name: Run Frontend Integration Tests  
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from frontend-integration

      - name: Run E2E Tests with Cypress
        uses: cypress-io/github-action@v5
        with:
          start: npm run dev
          wait-on: 'http://localhost:5173'
          config-file: cypress.config.ts

      - name: Performance Tests
        run: |
          docker compose -f docker-compose.test.yml up --build --exit-code-from perf-tests

  deploy-staging:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Production Images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: carved-rock/class-schedule:staging
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          load: true
          build-args: |
            ENVIRONMENT=staging
            BUILD_VERSION=${{ github.sha }}

      - name: Run Database Migrations
        run: |
          echo "Running staging database migrations..."
          docker compose -f docker-compose.migrate.yml up --exit-code-from migrate

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          docker compose -f docker-compose.staging.yml up -d
          ./scripts/wait-for-services.sh
          ./scripts/run-smoke-tests.sh

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Production Images
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: carved-rock/class-schedule:production
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
          load: true
          build-args: |
            ENVIRONMENT=production
            BUILD_VERSION=${{ github.sha }}

      - name: Deploy to Production
        run: |
          echo "Starting blue-green deployment process..."
          docker compose -f docker-compose.production.yml up -d
          ./scripts/verify-deployment.sh